import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import nodemailer from 'nodemailer';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { db, testConnection, setUserForAudit } from './db/index.js';
import { body, validationResult } from 'express-validator';
import multer from 'multer';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import csvParser from 'csv-parser';
import { createObjectCsvWriter } from 'csv-writer';

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
import adminRoutes from './routes/adminRoutes.js';
import uploadRoutes from './routes/uploadRoutes.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors({
  origin: ['http://localhost:5173', 'http://localhost:5174'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-User-Role', 'X-Requested-With'],
  exposedHeaders: ['Content-Range', 'X-Content-Range']
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = path.join(__dirname, 'uploads');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + '-' + file.originalname);
  }
});

const upload = multer({ storage });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ Mail.ru
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: parseInt(process.env.SMTP_PORT),
  secure: process.env.SMTP_SECURE === 'true',
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
  tls: {
    rejectUnauthorized: false // –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º —Å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP
transporter.verify((error, success) => {
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP:', error);
  } else {
    console.log('‚úÖ SMTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å–µ–º');
  }
});

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
const formatPrice = (price) => {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'RUB',
    maximumFractionDigits: 0,
  }).format(price);
};

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
  }
  
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
    req.user = user;
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞—É–¥–∏—Ç–∞
    setUserForAudit(user.id).catch(err => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞—É–¥–∏—Ç–∞:', err);
    });
    
    next();
  });
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
const checkRole = (roles) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }
    
    if (!Array.isArray(req.user.roles)) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const hasRole = req.user.roles.some(role => roles.includes(role));
    if (!hasRole) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    next();
  };
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –ø–∏—Å—å–º–∞
const generateOrderEmail = (orderData) => {
  const { formData, cartItems, total, orderNumber, orderDate } = orderData;
  
  const itemsHTML = cartItems.map(item => `
    <tr style="border-bottom: 1px solid #eee;">
      <td style="padding: 15px;">
        <strong>${item.name}</strong><br>
        <small style="color: #666;">${item.category}</small>
      </td>
      <td style="padding: 15px; text-align: center;">${item.quantity} —à—Ç.</td>
      <td style="padding: 15px; text-align: right;">${formatPrice(item.price)}</td>
      <td style="padding: 15px; text-align: right;"><strong>${formatPrice(item.price * item.quantity)}</strong></td>
    </tr>
  `).join('');

  return `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–ó–∞–∫–∞–∑ #${orderNumber}</title>
    </head>
    <body style="margin: 0; padding: 0; font-family: Arial, sans-serif; background-color: #f4f4f4;">
      <table width="100%" cellpadding="0" cellspacing="0" style="background-color: #f4f4f4; padding: 20px;">
        <tr>
          <td align="center">
            <table width="600" cellpadding="0" cellspacing="0" style="background-color: #ffffff; border-radius: 10px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
              
              <!-- Header -->
              <tr>
                <td style="background: linear-gradient(135deg, #1d3557 0%, #457b9d 100%); padding: 30px; text-align: center;">
                  <h1 style="color: white; margin: 0; font-size: 32px;">üèçÔ∏è MotoShop</h1>
                  <p style="color: rgba(255,255,255,0.9); margin: 10px 0 0 0;">–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!</p>
                </td>
              </tr>

              <!-- Order Info -->
              <tr>
                <td style="padding: 30px;">
                  <div style="background-color: #e63946; color: white; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                    <h2 style="margin: 0; font-size: 24px;">–ó–∞–∫–∞–∑ #${orderNumber}</h2>
                    <p style="margin: 5px 0 0 0; opacity: 0.9;">–î–∞—Ç–∞: ${orderDate}</p>
                  </div>

                  <h3 style="color: #1d3557; margin-bottom: 15px;">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑—á–∏–∫–µ:</h3>
                  <table width="100%" cellpadding="5" style="margin-bottom: 20px;">
                    <tr>
                      <td style="color: #666; width: 150px;"><strong>–ò–º—è:</strong></td>
                      <td>${formData.firstName} ${formData.lastName}</td>
                    </tr>
                    <tr>
                      <td style="color: #666;"><strong>Email:</strong></td>
                      <td>${formData.email}</td>
                    </tr>
                    <tr>
                      <td style="color: #666;"><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong></td>
                      <td>${formData.phone}</td>
                    </tr>
                    <tr>
                      <td style="color: #666;"><strong>–ê–¥—Ä–µ—Å:</strong></td>
                      <td>${formData.address}, ${formData.city}, ${formData.postalCode}</td>
                    </tr>
                    <tr>
                      <td style="color: #666;"><strong>–û–ø–ª–∞—Ç–∞:</strong></td>
                      <td>${formData.paymentMethod === 'card' ? 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' : 'üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'}</td>
                    </tr>
                    ${formData.comments ? `
                    <tr>
                      <td style="color: #666;"><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong></td>
                      <td>${formData.comments}</td>
                    </tr>
                    ` : ''}
                  </table>

                  <h3 style="color: #1d3557; margin-bottom: 15px;">–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</h3>
                  <table width="100%" cellpadding="0" cellspacing="0" style="border: 1px solid #eee; border-radius: 8px; overflow: hidden;">
                    <thead>
                      <tr style="background-color: #1d3557; color: white;">
                        <th style="padding: 12px; text-align: left;">–¢–æ–≤–∞—Ä</th>
                        <th style="padding: 12px; text-align: center;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                        <th style="padding: 12px; text-align: right;">–¶–µ–Ω–∞</th>
                        <th style="padding: 12px; text-align: right;">–°—É–º–º–∞</th>
                      </tr>
                    </thead>
                    <tbody>
                      ${itemsHTML}
                    </tbody>
                  </table>

                  <table width="100%" style="margin-top: 20px;">
                    <tr>
                      <td style="text-align: right; padding: 10px; color: #666;">
                        <strong>–¢–æ–≤–∞—Ä—ã:</strong>
                      </td>
                      <td style="text-align: right; padding: 10px; width: 150px;">
                        ${formatPrice(total)}
                      </td>
                    </tr>
                    <tr>
                      <td style="text-align: right; padding: 10px; color: #666;">
                        <strong>–î–æ—Å—Ç–∞–≤–∫–∞:</strong>
                      </td>
                      <td style="text-align: right; padding: 10px; color: #06d6a0; font-weight: bold;">
                        –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
                      </td>
                    </tr>
                    <tr style="border-top: 2px solid #1d3557;">
                      <td style="text-align: right; padding: 15px; font-size: 20px; color: #1d3557;">
                        <strong>–ò–¢–û–ì–û:</strong>
                      </td>
                      <td style="text-align: right; padding: 15px; font-size: 24px; color: #e63946; font-weight: bold;">
                        ${formatPrice(total)}
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>

              <!-- Footer -->
              <tr>
                <td style="background-color: #f8f9fa; padding: 20px; text-align: center; border-top: 1px solid #eee;">
                  <p style="margin: 0; color: #666; font-size: 14px;">
                    –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
                  </p>
                  <p style="margin: 10px 0 0 0; color: #666; font-size: 14px;">
                    üìû +7 (800) 555-35-35 | üìß info@motoshop.ru | üìç –ú–æ—Å–∫–≤–∞, —É–ª. –ú–æ—Ç–æ—Ü–∏–∫–ª–∏—Å—Ç–æ–≤, 1
                  </p>
                  <p style="margin: 15px 0 0 0; color: #999; font-size: 12px;">
                    ¬© 2025 MotoShop. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
                  </p>
                </td>
              </tr>

            </table>
          </td>
        </tr>
      </table>
    </body>
    </html>
  `;
};
// ============= API ROUTES =============

// ===== –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è =====

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/auth/register', [
  body('email').isEmail().withMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  body('password').isLength({ min: 6 }).withMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('firstName').notEmpty().withMessage('–í–≤–µ–¥–∏—Ç–µ –∏–º—è'),
  body('lastName').notEmpty().withMessage('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')
], async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    
    const { email, password, firstName, lastName, phone } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = await db('users').where({ email }).first();
    if (existingUser) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    
    // –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const saltRounds = 10;
    const passwordHash = await bcrypt.hash(password, saltRounds);
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏
    await db.transaction(async trx => {
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const [newUser] = await trx('users').insert({
        email,
        password_hash: passwordHash,
        first_name: firstName,
        last_name: lastName,
        phone: phone || null,
        is_active: true
      }).returning('id');
      
      const userId = newUser.id || newUser;
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ä–æ–ª–∏ "customer"
      const customerRole = await trx('roles').where({ name: 'customer' }).first();
      if (!customerRole) {
        throw new Error('–†–æ–ª—å "customer" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await trx('user_roles').insert({
        user_id: userId,
        role_id: customerRole.id
      });
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await trx('user_settings').insert({
        user_id: userId,
        theme: 'light',
        date_format: 'DD.MM.YYYY',
        items_per_page: 10,
        preferred_language: 'ru',
        notification_enabled: true
      });
    });
    
    res.status(201).json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      error: error.message
    });
  }
});

// –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
app.post('/api/auth/login', [
  body('email').isEmail().withMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  body('password').notEmpty().withMessage('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
], async (req, res) => {
  try {
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É:', req.body);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors.array());
      return res.status(400).json({ errors: errors.array() });
    }
    
    const { email, password } = req.body;
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { email });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      await db.raw('SELECT 1');
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    } catch (dbError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbError);
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email:', email);
    const user = await db('users').where({ email }).first();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');
    if (!user) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user.is_active) {
      return res.status(403).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è');
    try {
      const passwordMatch = await bcrypt.compare(password, user.password_hash);
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', passwordMatch ? '–°–æ–≤–ø–∞–¥–∞–µ—Ç' : '–ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
      if (!passwordMatch) {
        return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
      }
    } catch (bcryptError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è:', bcryptError);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è');
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    try {
      const userRoles = await db('user_roles')
        .join('roles', 'user_roles.role_id', 'roles.id')
        .where('user_roles.user_id', user.id)
        .select('roles.name');
      
      const roles = userRoles.map(role => role.name);
      console.log('‚úÖ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', roles);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞');
      const token = jwt.sign(
        { 
          id: user.id, 
          email: user.email,
          roles: roles
        }, 
        process.env.JWT_SECRET, 
        { expiresIn: process.env.JWT_EXPIRES_IN || '1d' }
      );
      console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω');
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      const settings = await db('user_settings').where({ user_id: user.id }).first();
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', settings ? '–ù–∞–π–¥–µ–Ω—ã' : '–ù–µ –Ω–∞–π–¥–µ–Ω—ã');
      
      res.json({
        success: true,
        token,
        user: {
          id: user.id,
          email: user.email,
          firstName: user.first_name,
          lastName: user.last_name,
          roles,
          settings
        }
      });
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
    } catch (rolesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π:', rolesError);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/auth/profile', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db('users').where({ id: userId }).first();
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRoles = await db('user_roles')
      .join('roles', 'user_roles.role_id', 'roles.id')
      .where('user_roles.user_id', userId)
      .select('roles.name');
    
    const roles = userRoles.map(role => role.name);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const settings = await db('user_settings').where({ user_id: userId }).first();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const orders = await db('orders')
      .where({ user_id: userId })
      .orderBy('created_at', 'desc')
      .select('id', 'order_number', 'status', 'total_amount', 'created_at');
    
    res.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        firstName: user.first_name,
        lastName: user.last_name,
        phone: user.phone,
        roles,
        settings,
        orders
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è',
      error: error.message
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/auth/profile', authenticateToken, [
  body('firstName').optional().notEmpty().withMessage('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
  body('lastName').optional().notEmpty().withMessage('–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π'),
  body('phone').optional()
], async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    
    const userId = req.user.id;
    const { firstName, lastName, phone } = req.body;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db('users')
      .where({ id: userId })
      .update({
        first_name: firstName,
        last_name: lastName,
        phone,
        updated_at: db.fn.now()
      });
    
    res.json({
      success: true,
      message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è',
      error: error.message
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/auth/settings', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const { theme, dateFormat, itemsPerPage, preferredLanguage, notificationEnabled } = req.body;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db('user_settings')
      .where({ user_id: userId })
      .update({
        theme: theme || 'light',
        date_format: dateFormat || 'DD.MM.YYYY',
        items_per_page: itemsPerPage || 10,
        preferred_language: preferredLanguage || 'ru',
        notification_enabled: notificationEnabled !== undefined ? notificationEnabled : true,
        updated_at: db.fn.now()
      });
    
    res.json({
      success: true,
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫',
      error: error.message
    });
  }
});

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
app.put('/api/auth/change-password', authenticateToken, [
  body('currentPassword').notEmpty().withMessage('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'),
  body('newPassword').isLength({ min: 6 }).withMessage('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
], async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    
    const userId = req.user.id;
    const { currentPassword, newPassword } = req.body;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db('users').where({ id: userId }).first();
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è
    const passwordMatch = await bcrypt.compare(currentPassword, user.password_hash);
    if (!passwordMatch) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' });
    }
    
    // –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    const saltRounds = 10;
    const newPasswordHash = await bcrypt.hash(newPassword, saltRounds);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    await db('users')
      .where({ id: userId })
      .update({
        password_hash: newPasswordHash,
        updated_at: db.fn.now()
      });
    
    res.json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è',
      error: error.message
    });
  }
});

// ===== –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
app.get('/api/categories', async (req, res) => {
  try {
    const categories = await db('categories')
      .where({ is_active: true })
      .orderBy('name');
    
    res.json({
      success: true,
      categories
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID –∏–ª–∏ slug
app.get('/api/categories/:idOrSlug', async (req, res) => {
  try {
    const { idOrSlug } = req.params;
    
    // –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID –∏–ª–∏ slug
    let category;
    
    if (isNaN(idOrSlug)) {
      // –ï—Å–ª–∏ —ç—Ç–æ slug
      category = await db('categories').where({ slug: idOrSlug }).first();
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ ID
      category = await db('categories').where({ id: idOrSlug }).first();
    }
    
    if (!category) {
      return res.status(404).json({
        success: false,
        message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const subcategories = await db('categories')
      .where({ parent_id: category.id, is_active: true })
      .orderBy('name');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const products = await db('products')
      .join('product_categories', 'products.id', 'product_categories.product_id')
      .where('product_categories.category_id', category.id)
      .where('products.is_active', true)
      .select('products.*');
    
    res.json({
      success: true,
      category: {
        ...category,
        subcategories,
        products
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      error: error.message
    });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.post('/api/categories', authenticateToken, checkRole(['admin', 'manager']), [
  body('name').notEmpty().withMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
  body('slug').notEmpty().withMessage('–í–≤–µ–¥–∏—Ç–µ slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
], async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    
    const { name, slug, description, parentId, imageUrl } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ slug
    const existingCategory = await db('categories').where({ slug }).first();
    if (existingCategory) {
      return res.status(400).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const [categoryId] = await db('categories').insert({
      name,
      slug,
      description,
      parent_id: parentId || null,
      image_url: imageUrl || null,
      is_active: true
    }).returning('id');
    
    res.status(201).json({
      success: true,
      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      categoryId
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      error: error.message
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.put('/api/categories/:id', authenticateToken, checkRole(['admin', 'manager']), async (req, res) => {
  try {
    const { id } = req.params;
    const { name, slug, description, parentId, imageUrl, isActive } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const category = await db('categories').where({ id }).first();
    if (!category) {
      return res.status(404).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ slug, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (slug && slug !== category.slug) {
      const existingCategory = await db('categories').where({ slug }).first();
      if (existingCategory) {
        return res.status(400).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await db('categories')
      .where({ id })
      .update({
        name: name || category.name,
        slug: slug || category.slug,
        description: description !== undefined ? description : category.description,
        parent_id: parentId !== undefined ? parentId : category.parent_id,
        image_url: imageUrl !== undefined ? imageUrl : category.image_url,
        is_active: isActive !== undefined ? isActive : category.is_active,
        updated_at: db.fn.now()
      });
    
    res.json({
      success: true,
      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      error: error.message
    });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.delete('/api/categories/:id', authenticateToken, checkRole(['admin']), async (req, res) => {
  try {
    const { id } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const category = await db('categories').where({ id }).first();
    if (!category) {
      return res.status(404).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const subcategories = await db('categories').where({ parent_id: id }).first();
    if (subcategories) {
      return res.status(400).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏–º–µ—é—â—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    await db('product_categories').where({ category_id: id }).del();
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await db('categories').where({ id }).del();
    
    res.json({
      success: true,
      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      error: error.message
    });
  }
});
// ===== –¢–æ–≤–∞—Ä—ã =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
app.get('/api/products', async (req, res) => {
  try {
    const {
      page = 1,
      limit = 10,
      sort = 'name',
      order = 'asc',
      category,
      search,
      minPrice,
      maxPrice,
      brand,
      featured
    } = req.query;
    
    // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    let query = db('products')
      .where('is_active', true);
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (category) {
      // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ slug –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ —ç—Ç–æ ID
      let categoryId;
      
      if (isNaN(category)) {
        // –ï—Å–ª–∏ —ç—Ç–æ slug
        const categoryObj = await db('categories').where({ slug: category }).first();
        if (categoryObj) {
          categoryId = categoryObj.id;
        }
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ ID
        categoryId = category;
      }
      
      if (categoryId) {
        query = query
          .join('product_categories', 'products.id', 'product_categories.product_id')
          .where('product_categories.category_id', categoryId);
      }
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é
    if (search) {
      query = query.where(function() {
        this.where('products.name', 'ilike', `%${search}%`)
            .orWhere('products.description', 'ilike', `%${search}%`);
      });
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
    if (minPrice) {
      query = query.where('products.price', '>=', minPrice);
    }
    if (maxPrice) {
      query = query.where('products.price', '<=', maxPrice);
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±—Ä–µ–Ω–¥—É
    if (brand) {
      query = query.where('products.brand', brand);
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ featured
    if (featured === 'true') {
      query = query.where('products.is_featured', true);
    }
    
    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
    const countQuery = query.clone();
    const [{ count }] = await countQuery.count('products.id as count');
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const products = await query
      .select('products.*')
      .orderBy(`products.${sort}`, order)
      .offset((page - 1) * limit)
      .limit(limit);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const productsWithCategories = await Promise.all(products.map(async (product) => {
      const categories = await db('categories')
        .join('product_categories', 'categories.id', 'product_categories.category_id')
        .where('product_categories.product_id', product.id)
        .select('categories.id', 'categories.name', 'categories.slug');
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
      const inventory = await db('inventory')
        .where('product_id', product.id)
        .first();
      
      return {
        ...product,
        categories,
        inStock: inventory ? inventory.quantity - inventory.reserved_quantity : 0
      };
    }));
    
    res.json({
      success: true,
      products: productsWithCategories,
      pagination: {
        total: parseInt(count),
        page: parseInt(page),
        limit: parseInt(limit),
        pages: Math.ceil(count / limit)
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID –∏–ª–∏ slug
app.get('/api/products/:idOrSlug', async (req, res) => {
  try {
    const { idOrSlug } = req.params;
    
    // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID –∏–ª–∏ slug
    const product = await db('products')
      .where({ id: isNaN(idOrSlug) ? undefined : idOrSlug, slug: isNaN(idOrSlug) ? idOrSlug : undefined })
      .first();
    
    if (!product) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–∞
    const categories = await db('categories')
      .join('product_categories', 'categories.id', 'product_categories.category_id')
      .where('product_categories.product_id', product.id)
      .select('categories.id', 'categories.name', 'categories.slug');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const images = await db('product_images')
      .where('product_id', product.id)
      .orderBy('sort_order');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
    const inventory = await db('inventory')
      .where('product_id', product.id)
      .first();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
    const reviews = await db('reviews')
      .leftJoin('users', 'reviews.user_id', 'users.id')
      .where('reviews.product_id', product.id)
      .where('reviews.is_approved', true)
      .select(
        'reviews.id',
        'reviews.rating',
        'reviews.comment',
        'reviews.created_at',
        'users.first_name',
        'users.last_name'
      )
      .orderBy('reviews.created_at', 'desc');
    
    // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏
    const avgRating = reviews.length > 0
      ? reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length
      : 0;
    
    res.json({
      success: true,
      product: {
        ...product,
        categories,
        images: [{ image_url: product.image_url, sort_order: 0 }, ...images],
        inStock: inventory ? inventory.quantity - inventory.reserved_quantity : 0,
        reviews,
        avgRating
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
      error: error.message
    });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.post('/api/products', authenticateToken, checkRole(['admin', 'manager']), [
  body('name').notEmpty().withMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'),
  body('slug').notEmpty().withMessage('–í–≤–µ–¥–∏—Ç–µ slug —Ç–æ–≤–∞—Ä–∞'),
  body('price').isNumeric().withMessage('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º')
], async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    
    const {
      name,
      slug,
      sku,
      description,
      price,
      oldPrice,
      imageUrl,
      isActive,
      isFeatured,
      brand,
      weight,
      dimensions,
      categoryIds,
      quantity
    } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ slug
    const existingProduct = await db('products').where({ slug }).first();
    if (existingProduct) {
      return res.status(400).json({ error: '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await db.transaction(async trx => {
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      const [productId] = await trx('products').insert({
        name,
        slug,
        sku: sku || null,
        description: description || null,
        price,
        old_price: oldPrice || null,
        image_url: imageUrl || null,
        is_active: isActive !== undefined ? isActive : true,
        is_featured: isFeatured !== undefined ? isFeatured : false,
        brand: brand || null,
        weight: weight || null,
        dimensions: dimensions || null
      }).returning('id');
      
      // –°–≤—è–∑—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      if (categoryIds && Array.isArray(categoryIds) && categoryIds.length > 0) {
        const categoryLinks = categoryIds.map(categoryId => ({
          product_id: productId,
          category_id: categoryId
        }));
        
        await trx('product_categories').insert(categoryLinks);
      }
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
      await trx('inventory').insert({
        product_id: productId,
        quantity: quantity || 0,
        reserved_quantity: 0,
        warehouse: 'main',
        last_restock_date: trx.fn.now()
      });
    });
    
    res.status(201).json({
      success: true,
      message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
      error: error.message
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.put('/api/products/:id', authenticateToken, checkRole(['admin', 'manager']), async (req, res) => {
  try {
    const { id } = req.params;
    const {
      name,
      slug,
      sku,
      description,
      price,
      oldPrice,
      imageUrl,
      isActive,
      isFeatured,
      brand,
      weight,
      dimensions,
      categoryIds
    } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    const product = await db('products').where({ id }).first();
    if (!product) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ slug, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (slug && slug !== product.slug) {
      const existingProduct = await db('products').where({ slug }).first();
      if (existingProduct) {
        return res.status(400).json({ error: '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }
    }
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await db.transaction(async trx => {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      await trx('products')
        .where({ id })
        .update({
          name: name || product.name,
          slug: slug || product.slug,
          sku: sku !== undefined ? sku : product.sku,
          description: description !== undefined ? description : product.description,
          price: price || product.price,
          old_price: oldPrice !== undefined ? oldPrice : product.old_price,
          image_url: imageUrl !== undefined ? imageUrl : product.image_url,
          is_active: isActive !== undefined ? isActive : product.is_active,
          is_featured: isFeatured !== undefined ? isFeatured : product.is_featured,
          brand: brand !== undefined ? brand : product.brand,
          weight: weight !== undefined ? weight : product.weight,
          dimensions: dimensions !== undefined ? dimensions : product.dimensions,
          updated_at: trx.fn.now()
        });
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
      if (categoryIds && Array.isArray(categoryIds)) {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–≤—è–∑–µ–π
        await trx('product_categories').where({ product_id: id }).del();
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–≤—è–∑–µ–π
        if (categoryIds.length > 0) {
          const categoryLinks = categoryIds.map(categoryId => ({
            product_id: id,
            category_id: categoryId
          }));
          
          await trx('product_categories').insert(categoryLinks);
        }
      }
    });
    
    res.json({
      success: true,
      message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
      error: error.message
    });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.delete('/api/products/:id', authenticateToken, checkRole(['admin']), async (req, res) => {
  try {
    const { id } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    const product = await db('products').where({ id }).first();
    if (!product) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–∞—Ö
    const orderItems = await db('order_items').where({ product_id: id }).first();
    if (orderItems) {
      // –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
      await db('products')
        .where({ id })
        .update({
          is_active: false,
          updated_at: db.fn.now()
        });
      
      return res.json({
        success: true,
        message: '–¢–æ–≤–∞—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–∫–∞–∑–∞—Ö'
      });
    }
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await db.transaction(async trx => {
      // –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      await trx('product_categories').where({ product_id: id }).del();
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      await trx('product_images').where({ product_id: id }).del();
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      await trx('inventory').where({ product_id: id }).del();
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
      await trx('reviews').where({ product_id: id }).del();
      
      // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      await trx('products').where({ id }).del();
    });
    
    res.json({
      success: true,
      message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
      error: error.message
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.put('/api/products/:id/inventory', authenticateToken, checkRole(['admin', 'manager']), [
  body('quantity').isInt({ min: 0 }).withMessage('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
], async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    
    const { id } = req.params;
    const { quantity } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    const product = await db('products').where({ id }).first();
    if (!product) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
    const inventory = await db('inventory').where({ product_id: id }).first();
    
    if (inventory) {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
      await db('inventory')
        .where({ product_id: id })
        .update({
          quantity,
          last_restock_date: db.fn.now(),
          updated_at: db.fn.now()
        });
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
      await db('inventory').insert({
        product_id: id,
        quantity,
        reserved_quantity: 0,
        warehouse: 'main',
        last_restock_date: db.fn.now()
      });
    }
    
    res.json({
      success: true,
      message: '–°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤',
      error: error.message
    });
  }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∫ —Ç–æ–≤–∞—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
app.post('/api/products/:id/reviews', authenticateToken, [
  body('rating').isInt({ min: 1, max: 5 }).withMessage('–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5'),
  body('comment').optional().notEmpty().withMessage('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
], async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    
    const { id } = req.params;
    const userId = req.user.id;
    const { rating, comment } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    const product = await db('products').where({ id }).first();
    if (!product) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
    const existingReview = await db('reviews')
      .where({ product_id: id, user_id: userId })
      .first();
    
    if (existingReview) {
      return res.status(400).json({ error: '–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–∫—É–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const hasOrdered = await db('order_items')
      .join('orders', 'order_items.order_id', 'orders.id')
      .where('orders.user_id', userId)
      .where('order_items.product_id', id)
      .where('orders.status', 'delivered')
      .first();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    const [reviewId] = await db('reviews').insert({
      product_id: id,
      user_id: userId,
      rating,
      comment: comment || null,
      is_approved: hasOrdered ? true : false // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–ª —Ç–æ–≤–∞—Ä
    }).returning('id');
    
    res.status(201).json({
      success: true,
      message: hasOrdered 
        ? '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω' 
        : '–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é',
      reviewId
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞',
      error: error.message
    });
  }
});
// ===== –ó–∞–∫–∞–∑—ã =====

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
app.post('/api/orders', authenticateToken, [
  body('formData').notEmpty().withMessage('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏'),
  body('cartItems').isArray({ min: 1 }).withMessage('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π'),
  body('total').isNumeric().withMessage('–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º')
], async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    
    const { formData, cartItems, total } = req.body;
    const userId = req.user.id;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ cartItems –¥–ª—è —Ö—Ä–∞–Ω–∏–º–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    const orderItems = cartItems.map(item => ({
      product_id: item.id,
      quantity: item.quantity
    }));
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–º–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    const result = await db.raw(`
      SELECT create_order(
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?::jsonb
      ) as result
    `, [
      userId,
      formData.address,
      formData.city,
      formData.postalCode,
      formData.country || '–†–æ—Å—Å–∏—è',
      formData.paymentMethod,
      formData.comments || null,
      JSON.stringify(orderItems)
    ]);
    
    const orderResult = result.rows[0].result;
    
    if (!orderResult.success) {
      return res.status(400).json({
        success: false,
        message: orderResult.message,
        insufficient_items: orderResult.insufficient_items
      });
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç—ã –¥–ª—è –ø–∏—Å—å–º–∞
    const orderDate = new Date().toLocaleString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    const orderData = {
      formData,
      cartItems,
      total,
      orderNumber: orderResult.order_number,
      orderDate,
    };
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏—Å—å–º–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    const shopMailOptions = {
      from: `"MotoShop" <${process.env.EMAIL_FROM}>`,
      to: process.env.EMAIL_TO,
      subject: `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderResult.order_number} –Ω–∞ —Å—É–º–º—É ${formatPrice(total)}`,
      html: generateOrderEmail(orderData),
    };
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏—Å—å–º–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    const customerMailOptions = {
      from: `"MotoShop" <${process.env.EMAIL_FROM}>`,
      to: formData.email,
      subject: `–í–∞—à –∑–∞–∫–∞–∑ #${orderResult.order_number} –ø—Ä–∏–Ω—è—Ç`,
      html: generateOrderEmail(orderData),
    };
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º
    try {
      await transporter.sendMail(shopMailOptions);
      console.log(`‚úÖ –ü–∏—Å—å–º–æ –æ –∑–∞–∫–∞–∑–µ ${orderResult.order_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω`);
    } catch (emailError) {
      console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –≤ –º–∞–≥–∞–∑–∏–Ω:', emailError);
    }
    
    try {
      await transporter.sendMail(customerMailOptions);
      console.log(`‚úÖ –ü–∏—Å—å–º–æ –æ –∑–∞–∫–∞–∑–µ ${orderResult.order_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É`);
    } catch (emailError) {
      console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –∫–ª–∏–µ–Ω—Ç—É:', emailError);
    }
    
    res.status(200).json({
      success: true,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω',
      orderNumber: orderResult.order_number,
      orderId: orderResult.order_id,
      orderDate
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/orders', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const { page = 1, limit = 10 } = req.query;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const orders = await db('orders')
      .where({ user_id: userId })
      .orderBy('created_at', 'desc')
      .offset((page - 1) * limit)
      .limit(limit);
    
    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
    const [{ count }] = await db('orders')
      .where({ user_id: userId })
      .count('id as count');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const ordersWithItems = await Promise.all(orders.map(async (order) => {
      const items = await db('order_items')
        .where({ order_id: order.id })
        .select('*');
      
      return {
        ...order,
        items
      };
    }));
    
    res.json({
      success: true,
      orders: ordersWithItems,
      pagination: {
        total: parseInt(count),
        page: parseInt(page),
        limit: parseInt(limit),
        pages: Math.ceil(count / limit)
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID
app.get('/api/orders/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const order = await db('orders')
      .where({ id })
      .first();
    
    if (!order) {
      return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    const isAdmin = req.user.roles.includes('admin');
    const isManager = req.user.roles.includes('manager');
    
    if (order.user_id !== userId && !isAdmin && !isManager) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞
    const items = await db('order_items')
      .leftJoin('products', 'order_items.product_id', 'products.id')
      .where({ order_id: id })
      .select(
        'order_items.*',
        'products.name as product_name',
        'products.image_url',
        'products.slug'
      );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = order.user_id ? await db('users')
      .where({ id: order.user_id })
      .select('id', 'email', 'first_name', 'last_name', 'phone')
      .first() : null;
    
    res.json({
      success: true,
      order: {
        ...order,
        items,
        user
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞',
      error: error.message
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.put('/api/orders/:id/status', authenticateToken, checkRole(['admin', 'manager']), [
  body('status').isIn(['pending', 'processing', 'shipped', 'delivered', 'cancelled']).withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'),
  body('paymentStatus').optional().isIn(['pending', 'paid', 'failed', 'refunded']).withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã')
], async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    
    const { id } = req.params;
    const { status, paymentStatus } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    const order = await db('orders').where({ id }).first();
    if (!order) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    const updateData = {
      status,
      updated_at: db.fn.now()
    };
    
    if (paymentStatus) {
      updateData.payment_status = paymentStatus;
    }
    
    await db('orders')
      .where({ id })
      .update(updateData);
    
    res.json({
      success: true,
      message: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      oldStatus: order.status,
      newStatus: status
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/admin/orders', authenticateToken, checkRole(['admin', 'manager']), async (req, res) => {
  try {
    const {
      page = 1,
      limit = 10,
      status,
      sort = 'created_at',
      order = 'desc',
      search
    } = req.query;
    
    // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    let query = db('orders');
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (status) {
      query = query.where('orders.status', status);
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (search) {
      query = query
        .leftJoin('users', 'orders.user_id', 'users.id')
        .where(function() {
          this.where('orders.order_number', 'ilike', `%${search}%`)
              .orWhere('users.email', 'ilike', `%${search}%`)
              .orWhere('users.first_name', 'ilike', `%${search}%`)
              .orWhere('users.last_name', 'ilike', `%${search}%`);
        })
        .select('orders.*');
    }
    
    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
    const countQuery = query.clone();
    const [{ count }] = await countQuery.count('orders.id as count');
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const orders = await query
      .orderBy(`orders.${sort}`, order)
      .offset((page - 1) * limit)
      .limit(limit);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤
    const ordersWithDetails = await Promise.all(orders.map(async (order) => {
      // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = order.user_id ? await db('users')
        .where({ id: order.user_id })
        .select('id', 'email', 'first_name', 'last_name', 'phone')
        .first() : null;
      
      // –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      const items = await db('order_items')
        .where({ order_id: order.id })
        .select('*');
      
      return {
        ...order,
        user,
        items
      };
    }));
    
    res.json({
      success: true,
      orders: ordersWithDetails,
      pagination: {
        total: parseInt(count),
        page: parseInt(page),
        limit: parseInt(limit),
        pages: Math.ceil(count / limit)
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤',
      error: error.message
    });
  }
});

// ===== –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç =====

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/export/products', authenticateToken, checkRole(['admin', 'manager']), async (req, res) => {
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const products = await db('products')
      .select('*')
      .orderBy('name');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const productsWithCategories = await Promise.all(products.map(async (product) => {
      const categories = await db('categories')
        .join('product_categories', 'categories.id', 'product_categories.category_id')
        .where('product_categories.product_id', product.id)
        .select('categories.name');
      
      const categoryNames = categories.map(cat => cat.name).join(', ');
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
      const inventory = await db('inventory')
        .where('product_id', product.id)
        .first();
      
      return {
        ...product,
        categories: categoryNames,
        quantity: inventory ? inventory.quantity : 0,
        reserved_quantity: inventory ? inventory.reserved_quantity : 0
      };
    }));
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è CSV
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const csvFilePath = path.join(__dirname, 'uploads', `products-${timestamp}.csv`);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CSV Writer
    const csvWriter = createObjectCsvWriter({
      path: csvFilePath,
      header: [
        { id: 'id', title: 'ID' },
        { id: 'name', title: '–ù–∞–∑–≤–∞–Ω–∏–µ' },
        { id: 'slug', title: 'Slug' },
        { id: 'sku', title: 'SKU' },
        { id: 'description', title: '–û–ø–∏—Å–∞–Ω–∏–µ' },
        { id: 'price', title: '–¶–µ–Ω–∞' },
        { id: 'old_price', title: '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞' },
        { id: 'image_url', title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' },
        { id: 'is_active', title: '–ê–∫—Ç–∏–≤–µ–Ω' },
        { id: 'is_featured', title: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π' },
        { id: 'brand', title: '–ë—Ä–µ–Ω–¥' },
        { id: 'weight', title: '–í–µ—Å' },
        { id: 'dimensions', title: '–†–∞–∑–º–µ—Ä—ã' },
        { id: 'categories', title: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏' },
        { id: 'quantity', title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' },
        { id: 'reserved_quantity', title: '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ' },
        { id: 'created_at', title: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' },
        { id: 'updated_at', title: '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' }
      ]
    });
    
    // –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ CSV
    await csvWriter.writeRecords(productsWithCategories);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    res.download(csvFilePath, `products-${timestamp}.csv`, (err) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', err);
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      fs.unlink(csvFilePath, (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', err);
        }
      });
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤',
      error: error.message
    });
  }
});

// –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.post('/api/import/products', authenticateToken, checkRole(['admin']), upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }
    
    const filePath = req.file.path;
    const results = [];
    const errors = [];
    let processed = 0;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è CSV
    fs.createReadStream(filePath)
      .pipe(csvParser())
      .on('data', async (data) => {
        try {
          processed++;
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
          if (!data.name || !data.slug || !data.price) {
            errors.push({
              row: processed,
              message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (name, slug, price)',
              data
            });
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ slug
          const existingProduct = await db('products').where({ slug: data.slug }).first();
          
          if (existingProduct) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
            await db('products')
              .where({ id: existingProduct.id })
              .update({
                name: data.name,
                sku: data.sku || null,
                description: data.description || null,
                price: parseFloat(data.price) || existingProduct.price,
                old_price: data.old_price ? parseFloat(data.old_price) : null,
                image_url: data.image_url || existingProduct.image_url,
                is_active: data.is_active === 'true' || data.is_active === '1',
                is_featured: data.is_featured === 'true' || data.is_featured === '1',
                brand: data.brand || null,
                weight: data.weight ? parseFloat(data.weight) : null,
                dimensions: data.dimensions || null,
                updated_at: db.fn.now()
              });
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            if (data.quantity) {
              await db('inventory')
                .where({ product_id: existingProduct.id })
                .update({
                  quantity: parseInt(data.quantity) || 0,
                  updated_at: db.fn.now()
                });
            }
            
            results.push({
              row: processed,
              action: 'updated',
              id: existingProduct.id,
              name: data.name
            });
          } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            const [productId] = await db('products').insert({
              name: data.name,
              slug: data.slug,
              sku: data.sku || null,
              description: data.description || null,
              price: parseFloat(data.price) || 0,
              old_price: data.old_price ? parseFloat(data.old_price) : null,
              image_url: data.image_url || null,
              is_active: data.is_active === 'true' || data.is_active === '1',
              is_featured: data.is_featured === 'true' || data.is_featured === '1',
              brand: data.brand || null,
              weight: data.weight ? parseFloat(data.weight) : null,
              dimensions: data.dimensions || null
            }).returning('id');
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            await db('inventory').insert({
              product_id: productId,
              quantity: parseInt(data.quantity) || 0,
              reserved_quantity: 0,
              warehouse: 'main',
              last_restock_date: db.fn.now()
            });
            
            results.push({
              row: processed,
              action: 'created',
              id: productId,
              name: data.name
            });
          }
        } catch (error) {
          errors.push({
            row: processed,
            message: error.message,
            data
          });
        }
      })
      .on('end', () => {
        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        fs.unlink(filePath, (err) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', err);
          }
        });
        
        res.json({
          success: true,
          message: '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
          processed,
          results,
          errors
        });
      })
      .on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV:', error);
        res.status(500).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV',
          error: error.message
        });
      });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤',
      error: error.message
    });
  }
});
// ===== –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/analytics/sales', authenticateToken, checkRole(['admin', 'manager']), async (req, res) => {
  try {
    const { startDate, endDate } = req.query;
    const start = startDate ? new Date(startDate) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    const end = endDate ? new Date(endDate) : new Date();
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
    const result = await db.raw(`
      SELECT get_sales_statistics(?, ?) as result
    `, [start, end]);
    
    const statistics = result.rows[0].result;
    
    res.json({
      success: true,
      statistics
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/analytics/categories', authenticateToken, checkRole(['admin', 'manager']), async (req, res) => {
  try {
    const { startDate, endDate } = req.query;
    const start = startDate ? new Date(startDate) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    const end = endDate ? new Date(endDate) : new Date();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryStats = await db('order_items')
      .join('products', 'order_items.product_id', 'products.id')
      .join('product_categories', 'products.id', 'product_categories.product_id')
      .join('categories', 'product_categories.category_id', 'categories.id')
      .join('orders', 'order_items.order_id', 'orders.id')
      .select('categories.id', 'categories.name', 'categories.slug')
      .sum('order_items.quantity as total_quantity')
      .sum(db.raw('order_items.quantity * order_items.price as total_revenue'))
      .where('orders.status', '!=', 'cancelled')
      .whereBetween('orders.created_at', [start, end])
      .groupBy('categories.id', 'categories.name', 'categories.slug')
      .orderBy('total_revenue', 'desc');
    
    res.json({
      success: true,
      period: {
        start: start.toISOString(),
        end: end.toISOString()
      },
      categories: categoryStats
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/analytics/users', authenticateToken, checkRole(['admin']), async (req, res) => {
  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userStats = await db('users')
      .select(db.raw('COUNT(*) as total_users'))
      .select(db.raw('COUNT(CASE WHEN is_active = true THEN 1 END) as active_users'))
      .first();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º
    const registrationStats = await db.raw(`
      SELECT 
        DATE_TRUNC('month', created_at) as month,
        COUNT(*) as count
      FROM users
      GROUP BY DATE_TRUNC('month', created_at)
      ORDER BY month DESC
      LIMIT 12
    `);
    
    // –¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
    const topCustomers = await db('orders')
      .join('users', 'orders.user_id', 'users.id')
      .select(
        'users.id',
        'users.email',
        'users.first_name',
        'users.last_name'
      )
      .count('orders.id as order_count')
      .sum('orders.total_amount as total_spent')
      .where('orders.status', '!=', 'cancelled')
      .groupBy('users.id', 'users.email', 'users.first_name', 'users.last_name')
      .orderBy('total_spent', 'desc')
      .limit(10);
    
    res.json({
      success: true,
      statistics: {
        users: userStats,
        registrations: registrationStats.rows,
        topCustomers
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
      error: error.message
    });
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –≤ CSV (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/analytics/export/sales', authenticateToken, checkRole(['admin', 'manager']), async (req, res) => {
  try {
    const { startDate, endDate } = req.query;
    const start = startDate ? new Date(startDate) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    const end = endDate ? new Date(endDate) : new Date();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
    const salesData = await db('orders')
      .select(
        'orders.id',
        'orders.order_number',
        'orders.created_at',
        'orders.total_amount',
        'orders.status',
        'orders.payment_method',
        'orders.payment_status',
        db.raw('CONCAT(users.first_name, \' \', users.last_name) as customer_name'),
        'users.email'
      )
      .leftJoin('users', 'orders.user_id', 'users.id')
      .whereBetween('orders.created_at', [start, end])
      .orderBy('orders.created_at', 'desc');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è CSV
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const csvFilePath = path.join(__dirname, 'uploads', `sales-${timestamp}.csv`);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CSV Writer
    const csvWriter = createObjectCsvWriter({
      path: csvFilePath,
      header: [
        { id: 'id', title: 'ID' },
        { id: 'order_number', title: '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞' },
        { id: 'created_at', title: '–î–∞—Ç–∞' },
        { id: 'total_amount', title: '–°—É–º–º–∞' },
        { id: 'status', title: '–°—Ç–∞—Ç—É—Å' },
        { id: 'payment_method', title: '–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã' },
        { id: 'payment_status', title: '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã' },
        { id: 'customer_name', title: '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' },
        { id: 'email', title: 'Email' }
      ]
    });
    
    // –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ CSV
    await csvWriter.writeRecords(salesData);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    res.download(csvFilePath, `sales-${timestamp}.csv`, (err) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', err);
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      fs.unlink(csvFilePath, (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', err);
        }
      });
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂',
      error: error.message
    });
  }
});

// ===== –ê—É–¥–∏—Ç =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –∞—É–¥–∏—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/audit', authenticateToken, checkRole(['admin']), async (req, res) => {
  try {
    const {
      page = 1,
      limit = 10,
      sort = 'created_at',
      order = 'desc',
      table,
      action,
      userId
    } = req.query;
    
    // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    let query = db('audit_log');
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ
    if (table) {
      query = query.where('table_name', table);
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–µ–π—Å—Ç–≤–∏—é
    if (action) {
      query = query.where('action', action);
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (userId) {
      query = query.where('user_id', userId);
    }
    
    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
    const countQuery = query.clone();
    const [{ count }] = await countQuery.count('id as count');
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const logs = await query
      .leftJoin('users', 'audit_log.user_id', 'users.id')
      .select(
        'audit_log.*',
        'users.email',
        'users.first_name',
        'users.last_name'
      )
      .orderBy(`audit_log.${sort}`, order)
      .offset((page - 1) * limit)
      .limit(limit);
    
    res.json({
      success: true,
      logs,
      pagination: {
        total: parseInt(count),
        page: parseInt(page),
        limit: parseInt(limit),
        pages: Math.ceil(count / limit)
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ –∞—É–¥–∏—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ –∞—É–¥–∏—Ç–∞',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
app.get('/api/roles', authenticateToken, async (req, res) => {
  try {
    const roles = await db('roles')
      .select('id', 'name', 'description')
      .orderBy('name');
    
    res.json({
      success: true,
      roles
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π',
      error: error.message
    });
  }
});

// ===== –ú–∞—Ä—à—Ä—É—Ç—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ =====

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.use('/api/admin', adminRoutes);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
app.use('/api/upload', uploadRoutes);

// ===== –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã =====

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç API
app.get('/api', (req, res) => {
  res.json({ 
    status: 'ok', 
    message: 'MotoShop API is running',
    version: '1.0.0',
    endpoints: {
      auth: '/api/auth/*',
      categories: '/api/categories',
      products: '/api/products',
      orders: '/api/orders',
      admin: '/api/admin/*',
      analytics: '/api/analytics/*'
    }
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', message: 'Server is running' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api/*', (req, res) => {
  res.status(404).json({ error: 'API endpoint not found' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbConnected = await testConnection();
    if (!dbConnected) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–µ—Ä–≤–µ—Ä –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.');
      process.exit(1);
    }
    
    app.listen(PORT, () => {
      console.log(`\nüöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìß Email —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${process.env.SMTP_USER}`);
      console.log(`üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
      console.log(`üõ¢Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${process.env.DB_NAME} –Ω–∞ ${process.env.DB_HOST}`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
};

startServer();
