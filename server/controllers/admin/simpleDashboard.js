import db from '../../db/index.js';

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–∞—à–±–æ—Ä–¥–∞ - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
 */
export const getSimpleDashboardStats = async (req, res) => {
  try {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞...');
    
    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = {
      total: {
        orders: 0,
        revenue: 0,
        users: 0,
        products: 0
      },
      recent: {
        orders: 0,
        revenue: 0,
        users: 0
      },
      topProducts: [],
      recentOrders: [],
      ordersByStatus: [],
      salesChart: []
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    try {
      const ordersCount = await db('orders').count('* as count').first();
      stats.total.orders = parseInt(ordersCount?.count || 0);
      console.log('‚úÖ –ó–∞–∫–∞–∑–æ–≤:', stats.total.orders);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–∫–∞–∑–æ–≤:', err.message);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É
    try {
      const revenue = await db('orders')
        .whereNot('status', 'cancelled')
        .sum('total_amount as total')
        .first();
      stats.total.revenue = parseFloat(revenue?.total || 0);
      console.log('‚úÖ –í—ã—Ä—É—á–∫–∞:', stats.total.revenue);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –≤—ã—Ä—É—á–∫–∏:', err.message);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try {
      const usersCount = await db('users').count('* as count').first();
      stats.total.users = parseInt(usersCount?.count || 0);
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', stats.total.users);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err.message);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    try {
      const productsCount = await db('products')
        .where('is_active', true)
        .count('* as count')
        .first();
      stats.total.products = parseInt(productsCount?.count || 0);
      console.log('‚úÖ –¢–æ–≤–∞—Ä–æ–≤:', stats.total.products);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤:', err.message);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    try {
      const recentOrdersCount = await db('orders')
        .where('created_at', '>=', thirtyDaysAgo)
        .count('* as count')
        .first();
      stats.recent.orders = parseInt(recentOrdersCount?.count || 0);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤:', err.message);
    }
    
    try {
      const recentRevenue = await db('orders')
        .where('created_at', '>=', thirtyDaysAgo)
        .whereNot('status', 'cancelled')
        .sum('total_amount as total')
        .first();
      stats.recent.revenue = parseFloat(recentRevenue?.total || 0);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –Ω–µ–¥–∞–≤–Ω–µ–π –≤—ã—Ä—É—á–∫–∏:', err.message);
    }
    
    try {
      const recentUsersCount = await db('users')
        .where('created_at', '>=', thirtyDaysAgo)
        .count('* as count')
        .first();
      stats.recent.users = parseInt(recentUsersCount?.count || 0);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err.message);
    }
    
    // –¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤
    try {
      const topProducts = await db.raw(`
        SELECT 
          p.id,
          p.name,
          p.image_url,
          COALESCE(SUM(oi.quantity), 0)::integer as total_sold,
          COALESCE(SUM(oi.quantity * oi.price), 0)::numeric as revenue
        FROM products p
        LEFT JOIN order_items oi ON p.id = oi.product_id
        LEFT JOIN orders o ON oi.order_id = o.id AND o.status != 'cancelled'
        GROUP BY p.id, p.name, p.image_url
        ORDER BY total_sold DESC
        LIMIT 5
      `);
      stats.topProducts = topProducts.rows || [];
      console.log('‚úÖ –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤:', stats.topProducts.length);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤:', err.message);
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
    try {
      const recentOrders = await db('orders')
        .leftJoin('users', 'orders.user_id', 'users.id')
        .select(
          'orders.id',
          'orders.order_number',
          'orders.status',
          'orders.total_amount',
          'orders.created_at',
          'users.first_name',
          'users.last_name',
          'users.email'
        )
        .orderBy('orders.created_at', 'desc')
        .limit(10);
      stats.recentOrders = recentOrders || [];
      console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤:', stats.recentOrders.length);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤:', err.message);
    }
    
    // –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
    try {
      const ordersByStatus = await db('orders')
        .select('status')
        .count('* as count')
        .groupBy('status');
      stats.ordersByStatus = ordersByStatus.map(s => ({
        status: s.status,
        count: parseInt(s.count)
      }));
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤:', stats.ordersByStatus.length);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤:', err.message);
    }
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    res.json({
      success: true,
      stats
    });
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞',
      error: error.message
    });
  }
};

export default {
  getSimpleDashboardStats
};
