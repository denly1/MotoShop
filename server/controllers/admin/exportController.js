import db from '../../db/index.js';
import { createObjectCsvWriter } from 'csv-writer';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV
 */
export const exportProductsCSV = async (req, res) => {
  try {
    console.log('üì• –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const products = await db('products')
      .leftJoin('inventory', 'products.id', 'inventory.product_id')
      .select(
        'products.id',
        'products.name',
        'products.sku',
        'products.brand',
        'products.price',
        'products.old_price',
        'products.is_active',
        'products.is_featured',
        'inventory.quantity'
      )
      .orderBy('products.id');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    const tempDir = path.join(__dirname, '..', '..', 'temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª CSV
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const csvFilePath = path.join(tempDir, `products_${timestamp}.csv`);
    
    const csvWriter = createObjectCsvWriter({
      path: csvFilePath,
      header: [
        { id: 'id', title: 'ID' },
        { id: 'name', title: '–ù–∞–∑–≤–∞–Ω–∏–µ' },
        { id: 'sku', title: '–ê—Ä—Ç–∏–∫—É–ª' },
        { id: 'brand', title: '–ë—Ä–µ–Ω–¥' },
        { id: 'price', title: '–¶–µ–Ω–∞' },
        { id: 'old_price', title: '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞' },
        { id: 'quantity', title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' },
        { id: 'is_active', title: '–ê–∫—Ç–∏–≤–µ–Ω' },
        { id: 'is_featured', title: '–•–∏—Ç –ø—Ä–æ–¥–∞–∂' }
      ],
      encoding: 'utf8'
    });
    
    await csvWriter.writeRecords(products);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    res.download(csvFilePath, `products_${timestamp}.csv`, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', err);
      }
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlink(csvFilePath, (unlinkErr) => {
        if (unlinkErr) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', unlinkErr);
        }
      });
    });
    
    console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤',
      error: error.message
    });
  }
};

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ CSV
 */
export const exportOrdersCSV = async (req, res) => {
  try {
    console.log('üì• –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ CSV...');
    
    const orders = await db('orders')
      .leftJoin('users', 'orders.user_id', 'users.id')
      .select(
        'orders.id',
        'orders.order_number',
        'orders.status',
        'orders.payment_status',
        'orders.total_amount',
        'orders.created_at',
        'users.email',
        'users.first_name',
        'users.last_name'
      )
      .orderBy('orders.created_at', 'desc');
    
    const tempDir = path.join(__dirname, '..', '..', 'temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const csvFilePath = path.join(tempDir, `orders_${timestamp}.csv`);
    
    const csvWriter = createObjectCsvWriter({
      path: csvFilePath,
      header: [
        { id: 'id', title: 'ID' },
        { id: 'order_number', title: '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞' },
        { id: 'email', title: 'Email –∫–ª–∏–µ–Ω—Ç–∞' },
        { id: 'first_name', title: '–ò–º—è' },
        { id: 'last_name', title: '–§–∞–º–∏–ª–∏—è' },
        { id: 'total_amount', title: '–°—É–º–º–∞' },
        { id: 'status', title: '–°—Ç–∞—Ç—É—Å' },
        { id: 'payment_status', title: '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã' },
        { id: 'created_at', title: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' }
      ],
      encoding: 'utf8'
    });
    
    await csvWriter.writeRecords(orders);
    
    res.download(csvFilePath, `orders_${timestamp}.csv`, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', err);
      }
      fs.unlink(csvFilePath, (unlinkErr) => {
        if (unlinkErr) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', unlinkErr);
        }
      });
    });
    
    console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–∫–∞–∑–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–∫–∞–∑–æ–≤',
      error: error.message
    });
  }
};

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞—à–±–æ—Ä–¥–∞ –≤ CSV
 */
export const exportDashboardCSV = async (req, res) => {
  try {
    console.log('üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞—à–±–æ—Ä–¥–∞ –≤ CSV...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = [];
    
    const ordersCount = await db('orders').count('* as count').first();
    stats.push({ metric: '–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤', value: ordersCount.count });
    
    const revenue = await db('orders')
      .whereNot('status', 'cancelled')
      .sum('total_amount as total')
      .first();
    stats.push({ metric: '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', value: revenue.total || 0 });
    
    const usersCount = await db('users').count('* as count').first();
    stats.push({ metric: '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', value: usersCount.count });
    
    const productsCount = await db('products').count('* as count').first();
    stats.push({ metric: '–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤', value: productsCount.count });
    
    const tempDir = path.join(__dirname, '..', '..', 'temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const csvFilePath = path.join(tempDir, `dashboard_${timestamp}.csv`);
    
    const csvWriter = createObjectCsvWriter({
      path: csvFilePath,
      header: [
        { id: 'metric', title: '–ú–µ—Ç—Ä–∏–∫–∞' },
        { id: 'value', title: '–ó–Ω–∞—á–µ–Ω–∏–µ' }
      ],
      encoding: 'utf8'
    });
    
    await csvWriter.writeRecords(stats);
    
    res.download(csvFilePath, `dashboard_${timestamp}.csv`, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', err);
      }
      fs.unlink(csvFilePath, (unlinkErr) => {
        if (unlinkErr) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', unlinkErr);
        }
      });
    });
    
    console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞—à–±–æ—Ä–¥–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞—à–±–æ—Ä–¥–∞',
      error: error.message
    });
  }
};

export default {
  exportProductsCSV,
  exportOrdersCSV,
  exportDashboardCSV
};
