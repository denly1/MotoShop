import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { db } from './db/index.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const fixDatabase = async () => {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlPath = path.join(__dirname, '..', 'fix_database.sql');
    const sql = fs.readFileSync(sqlPath, 'utf8');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const queries = sql
      .split(';')
      .map(q => q.trim())
      .filter(q => q.length > 0 && !q.startsWith('--'));
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${queries.length} SQL –∑–∞–ø—Ä–æ—Å–æ–≤\n`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
    for (let i = 0; i < queries.length; i++) {
      const query = queries[i];
      if (query.length > 0) {
        try {
          console.log(`‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å ${i + 1}/${queries.length}...`);
          await db.raw(query);
          console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (ON CONFLICT)
          if (!error.message.includes('duplicate') && !error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ ${i + 1}:`, error.message);
          }
        }
      }
    }
    
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await db('users').select('email', 'first_name', 'last_name');
    console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users.length);
    users.forEach(u => console.log(`   - ${u.email} (${u.first_name} ${u.last_name})`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
    const roles = await db('roles').select('name');
    console.log('\nüîê –†–æ–ª–∏:', roles.length);
    roles.forEach(r => console.log(`   - ${r.name}`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await db('categories').where({ parent_id: null }).select('name', 'slug');
    console.log('\nüìÅ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories.length);
    categories.forEach(c => console.log(`   - ${c.name} (${c.slug})`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
    const products = await db('products').select('name', 'price');
    console.log('\nüõí –¢–æ–≤–∞—Ä—ã:', products.length);
    products.forEach(p => console.log(`   - ${p.name} - ${p.price} —Ä—É–±.`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    const inventory = await db('inventory').select('*');
    console.log('\nüì¶ –°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏:', inventory.length);
    
    console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    console.log('\nüîë –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@motoshop.ru / admin123');
    console.log('   –ú–µ–Ω–µ–¥–∂–µ—Ä: manager@motoshop.ru / manager123');
    console.log('   –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: user@example.com / user123');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
};

fixDatabase();
